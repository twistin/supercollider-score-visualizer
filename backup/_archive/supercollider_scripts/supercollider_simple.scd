// SC Score Visualizer - SOLUCI√ìN DEFINITIVA QUE FUNCIONA
// Puerto OSC: 57124

// =====================================================================
// üîß SOLUCI√ìN AL PROBLEMA DE VARIABLES:
// En SuperCollider, las variables SIN `var` dentro de un bloque () 
// se convierten autom√°ticamente en variables de int√©rprete (globales)
// =====================================================================

"STARTING Iniciando SC Score Visualizer...".postln;

// Configuraci√≥n OSC (global sin var)
osc = NetAddr.new("127.0.0.1", 57124);
"OSC configurado en puerto 57124".postln;

// ========== FUNCIONES DE ENV√çO (GLOBALES) ==========

sendPoint = { |freq=440, amp=0.5, dur=1.0|
    osc.sendMsg("/event", "point", freq, amp, dur, 0.1, 0.1, 0.5, 0.0, 0.0, 220);
    ("OK Punto: " ++ freq ++ "Hz, " ++ dur ++ "s").postln;
};

sendGliss = { |startFreq=220, endFreq=880, amp=0.7, dur=3.0|
    osc.sendMsg("/event", "gliss", startFreq, endFreq, amp, dur, 0, 0.1, 0.1, 0.7, 0.2, 0.1, 120);
    ("OK Glissando: " ++ startFreq ++ " ‚Üí " ++ endFreq ++ "Hz").postln;
};

sendCluster = { |centerFreq=500, spread=100, voices=6, amp=0.6, dur=2.0|
    osc.sendMsg("/event", "cluster", centerFreq, spread, voices, amp, dur, 0.1, 0.1, 0.8, 0.3, 0.4, 180);
    ("OK Cluster: " ++ centerFreq ++ "Hz ¬±" ++ spread ++ ", " ++ voices ++ " voces").postln;
};

sendNoise = { |centerFreq=1000, bandwidth=500, amp=0.4, dur=2.0|
    osc.sendMsg("/event", "noise", centerFreq, bandwidth, amp, dur, 1.0, 0, 0.1, 0.1, 0.6, 0.8, 0.4, 60);
    ("OK Ruido: " ++ centerFreq ++ "Hz ¬±" ++ bandwidth).postln;
};

sendMass = { |components=4, amp=0.5, dur=3.0|
    var freqs = Array.fill(components, { 200 + 1500.rand });
    var amps = Array.fill(components, { 0.3 + 0.7.rand });
    var profile = [freqs, amps].flop.flatten;
    var args = ["mass", components, amp, dur, 0.3, 0.2, 0.1, 0.1, 0.9, 0.5, 0.7, 280] ++ profile;
    osc.sendMsg("/event", *args);
    ("OK Masa sonora: " ++ components ++ " componentes").postln;
};

// ========== DEMOS Y PRUEBAS (GLOBALES) ==========

testBasic = {
    "TEST === PRUEBA B√ÅSICA (5 eventos) ===".postln;
    
    sendPoint.(440, 0.7, 2.0);
    
    { 2.5.wait; sendGliss.(220, 880, 0.8, 3.0); }.fork;
    { 4.wait; sendCluster.(660, 150, 8, 0.6, 4.0); }.fork;
    { 6.wait; sendNoise.(1000, 500, 0.5, 2.5); }.fork;
    { 8.wait; sendMass.(6, 0.6, 3.0); 
      { 3.5.wait; "OK === PRUEBA COMPLETADA ===".postln; }.fork; 
    }.fork;
};

compositionXenakis = {
    "MUSIC === COMPOSICI√ìN ESTILO XENAKIS ===".postln;
    
    // Puntos dispersos (Metastasis)
    {
        20.do { |i|
            var freq = 100 + (3000 * (i/20)) + 100.rand2;
            var amp = 0.3 + 0.4.rand;
            var dur = 0.5 + 1.5.rand;
            sendPoint.(freq, amp, dur);
            (0.2 + 0.8.rand).wait;
        };
    }.fork;
    
    // Glissandi (Pithoprakta)
    {
        3.wait;
        8.do { |i|
            var start = 200 + 1000.rand;
            var end = 200 + 1000.rand;
            var dur = 2.0 + 3.0.rand;
            sendGliss.(start, end, 0.5 + 0.3.rand, dur);
            (dur * 0.3).wait;
        };
    }.fork;
    
    // Clusters estoc√°sticos
    {
        8.wait;
        6.do { |i|
            var center = 300 + 1200.rand;
            var spread = 50 + 150.rand;
            var voices = 4 + 8.rand;
            sendCluster.(center, spread, voices, 0.4 + 0.3.rand, 3.0 + 2.0.rand);
            (1.0 + 2.0.rand).wait;
        };
    }.fork;
    
    "üéµ Duraci√≥n total: ~30 segundos".postln;
};

quickDemo = {
    "‚ö° === DEMO R√ÅPIDO ===".postln;
    sendPoint.(330, 0.6, 1.0);
    { 1.2.wait; sendGliss.(440, 880, 0.7, 2.0); }.fork;
    { 2.5.wait; sendCluster.(550, 100, 6, 0.5, 2.5); }.fork;
};

// ========== ASIGNACIONES FINALES (ESTAS SON LAS QUE USAR√ÅS) ==========

scvTest = testBasic;
scvXenakis = compositionXenakis;
scvQuick = quickDemo;

scvSendPoint = sendPoint;
scvSendGliss = sendGliss;
scvSendCluster = sendCluster;
scvSendNoise = sendNoise;
scvSendMass = sendMass;

// ========== VERIFICACI√ìN Y MENSAJE FINAL ==========

"".postln;
"OK OK OK LISTO PARA USAR OK OK ‚úÖ".postln;
"".postln;
"üìã FUNCIONES PRINCIPALES DISPONIBLES:".postln;
"  ‚Ä¢ scvTest()          - Prueba b√°sica (RECOMENDADO)".postln;
"  ‚Ä¢ scvXenakis()       - Composici√≥n estilo Xenakis".postln;
"  ‚Ä¢ scvQuick()         - Demo r√°pido".postln;
"".postln;
"üì¶ FUNCIONES DE ENV√çO DIRECTO:".postln;
"  ‚Ä¢ scvSendPoint(freq, amp, dur)".postln;
"  ‚Ä¢ scvSendGliss(startFreq, endFreq, amp, dur)".postln;
"  ‚Ä¢ scvSendCluster(center, spread, voices, amp, dur)".postln;
"  ‚Ä¢ scvSendNoise(center, bandwidth, amp, dur)".postln;
"  ‚Ä¢ scvSendMass(components, amp, dur)".postln;
"".postln;
"STARTING EJECUTA AHORA: scvTest()".postln;
"Puerto OSC: 57124".postln;
"Aseg√∫rate de que el visualizador Rust est√© corriendo".postln;
"".postln;

// Verificaci√≥n final
if(scvTest.isFunction, {
    "OK scvTest() est√° lista para usar".postln;
}, {
    "ERROR ERROR: scvTest no es una funci√≥n v√°lida".postln;
});

// =====================================================================
// INSTRUCCIONES:
// =====================================================================
// 1. SELECCIONA TODO ESTE C√ìDIGO (Cmd+A)
// 2. EJECUTA TODO (Cmd+Return)
// 3. ESPERA el mensaje "OK scvTest() est√° lista para usar"
// 4. EJECUTA: scvTest()
//
// WARNING  DIFERENCIAS CLAVE CON LA VERSI√ìN ANTERIOR:
// - NO usa bloques (...)
// - NO usa declaraciones var para variables globales
// - Todas las variables se crean directamente como globales
// - Mucho m√°s simple y confiable
// =====================================================================
