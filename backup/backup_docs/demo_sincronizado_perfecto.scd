// demo_sincronizado_perfecto.scd
// DEMO AUDIOVISUAL CON SINCRONIZACI√ìN PERFECTA
// Corrige todos los problemas: direcci√≥n, duraci√≥n, artefactos visuales

(
"=== DEMO SINCRONIZACI√ìN AUDIOVISUAL PERFECTA ===".postln;

// Funci√≥n principal que maneja el servidor
var executeDemo;

executeDemo = {
    Routine({
        var addr, sendPerfectGliss, sendPerfectPoint, sendPerfectCluster, sendPerfectNoise;
        
        addr = NetAddr.new("127.0.0.1", 57122);
        
        // GLISSANDO PERFECTAMENTE SINCRONIZADO
        sendPerfectGliss = { |startFreq=100, endFreq=400, amp=0.8, dur=3.0|
            var visualDur, audioDur;
            
            // Duraci√≥n ID√âNTICA para audio y visual
            visualDur = dur;
            audioDur = dur;
            
            // Enviar evento visual
            addr.sendMsg("/event", "gliss", startFreq, endFreq, amp, visualDur);
            
            if(s.serverRunning, {
                {
                    // Audio con EXACTAMENTE la misma duraci√≥n y direcci√≥n
                    var freqLine = XLine.kr(startFreq, endFreq, audioDur);
                    var env = Env.linen(0.05, audioDur - 0.1, 0.05); // M√≠nima envolvente
                    var sig = SinOsc.ar(freqLine, 0, amp * EnvGen.kr(env, doneAction: 2));
                    Out.ar(0, sig.dup);
                }.play;
                ("üéØ GLISS SINCRONIZADO: " ++ startFreq ++ "‚Üí" ++ endFreq ++ " dur=" ++ dur).postln;
            }, {
                ("üëÅÔ∏è  Visual: gliss " ++ startFreq ++ "‚Üí" ++ endFreq ++ " (sin audio)").postln;
            });
        };
        
        // PUNTO PERFECTAMENTE SINCRONIZADO
        sendPerfectPoint = { |freq=440, amp=0.5, dur=1.0|
            // Enviar evento visual
            addr.sendMsg("/event", "point", freq, amp, dur);
            
            if(s.serverRunning, {
                {
                    // Audio con EXACTAMENTE la misma duraci√≥n
                    var env = Env.linen(0.05, dur - 0.1, 0.05);
                    var sig = SinOsc.ar(freq, 0, amp * EnvGen.kr(env, doneAction: 2));
                    Out.ar(0, sig.dup);
                }.play;
                ("üéØ PUNTO SINCRONIZADO: freq=" ++ freq ++ " dur=" ++ dur).postln;
            }, {
                ("üëÅÔ∏è  Visual: punto freq=" ++ freq ++ " (sin audio)").postln;
            });
        };
        
        // CLUSTER PERFECTAMENTE SINCRONIZADO
        sendPerfectCluster = { |centerFreq=500, freqSpread=100, numVoices=4, amp=0.6, dur=4.0|
            // Enviar evento visual
            addr.sendMsg("/event", "cluster", centerFreq, freqSpread, numVoices, amp, dur);
            
            if(s.serverRunning, {
                {
                    // Audio con EXACTAMENTE la misma duraci√≥n
                    var freqs = Array.fill(numVoices, { centerFreq + rrand(freqSpread.neg, freqSpread) });
                    var env = Env.linen(0.1, dur - 0.2, 0.1);
                    var sig = Mix.ar(freqs.collect({ |freq| SinOsc.ar(freq, 0, amp / numVoices) }));
                    sig = sig * EnvGen.kr(env, doneAction: 2);
                    Out.ar(0, sig.dup);
                }.play;
                ("üéØ CLUSTER SINCRONIZADO: freq=" ++ centerFreq ++ " voices=" ++ numVoices ++ " dur=" ++ dur).postln;
            }, {
                ("üëÅÔ∏è  Visual: cluster freq=" ++ centerFreq ++ " (sin audio)").postln;
            });
        };
        
        // RUIDO PERFECTAMENTE SINCRONIZADO
        sendPerfectNoise = { |centerFreq=1000, bandwidth=200, amp=0.7, dur=3.0|
            // Enviar evento visual
            addr.sendMsg("/event", "noise", centerFreq, bandwidth, amp, dur);
            
            if(s.serverRunning, {
                {
                    // Audio con EXACTAMENTE la misma duraci√≥n
                    var env = Env.linen(0.1, dur - 0.2, 0.1);
                    var sig = WhiteNoise.ar(amp);
                    sig = BPF.ar(sig, centerFreq, bandwidth / centerFreq);
                    sig = sig * EnvGen.kr(env, doneAction: 2);
                    Out.ar(0, sig.dup);
                }.play;
                ("üéØ RUIDO SINCRONIZADO: freq=" ++ centerFreq ++ " dur=" ++ dur).postln;
            }, {
                ("üëÅÔ∏è  Visual: ruido freq=" ++ centerFreq ++ " (sin audio)").postln;
            });
        };
        
        "üé® INICIANDO DEMOSTRACI√ìN DE SINCRONIZACI√ìN PERFECTA...".postln;
        if(s.serverRunning, {
            "üîä Audio habilitado - observa la sincronizaci√≥n perfecta".postln;
        }, {
            "üëÅÔ∏è  Solo visual (ejecuta s.boot; primero para audio)".postln;
        });
        
        // PRUEBAS DE SINCRONIZACI√ìN
        
        "1. üéØ TESTE DE DIRECCI√ìN: glissando ascendente".postln;
        sendPerfectGliss.value(200, 800, 0.9, 4.0);
        1.5.wait;
        
        "2. üéØ TESTE DE DIRECCI√ìN: glissando descendente".postln;
        sendPerfectGliss.value(800, 200, 0.9, 4.0);
        1.5.wait;
        
        "3. üéØ TESTE DE DURACI√ìN: puntos de diferentes duraciones".postln;
        sendPerfectPoint.value(440, 0.8, 1.0);
        0.5.wait;
        sendPerfectPoint.value(550, 0.8, 2.0);
        0.5.wait;
        sendPerfectPoint.value(660, 0.8, 3.0);
        1.0.wait;
        
        "4. üéØ TESTE COMPLEJO: m√∫ltiples eventos simult√°neos".postln;
        sendPerfectGliss.value(100, 400, 0.8, 5.0);
        sendPerfectGliss.value(500, 200, 0.7, 5.0);
        sendPerfectCluster.value(300, 80, 6, 0.6, 5.0);
        sendPerfectNoise.value(1000, 300, 0.5, 5.0);
        
        3.0.wait;
        
        "5. üéØ TESTE FINAL: secuencia compleja".postln;
        sendPerfectPoint.value(220, 0.9, 1.5);
        0.5.wait;
        sendPerfectGliss.value(150, 600, 0.8, 3.0);
        1.0.wait;
        sendPerfectCluster.value(450, 120, 8, 0.7, 4.0);
        1.0.wait;
        sendPerfectNoise.value(1200, 400, 0.6, 3.0);
        
        "üéâ ¬°DEMOSTRACI√ìN COMPLETA!".postln;
        "Si ves discrepancias entre audio y visual, rep√≥rtalo inmediatamente.".postln;
        "Este sistema est√° dise√±ado para live coding con sincronizaci√≥n perfecta.".postln;
        
    }).play;
};

// Verificar servidor y ejecutar
if(s.serverRunning.not, {
    "‚ö†Ô∏è  Servidor de audio no est√° funcionando.".postln;
    "Intentando arrancar servidor...".postln;
    s.boot;
    s.waitForBoot({
        "‚úì Servidor arrancado - ejecutando demo de sincronizaci√≥n perfecta...".postln;
        executeDemo.value;
    }, onFailure: {
        "‚úó No se pudo arrancar el servidor - solo demostraci√≥n visual".postln;
        executeDemo.value;
    });
}, {
    "‚úì Servidor funcionando - ejecutando demo de sincronizaci√≥n perfecta...".postln;
    executeDemo.value;
});
)

// PARA LIVE CODING - FUNCIONES INDEPENDIENTES:
(
// Glissando con sincronizaci√≥n perfecta
~perfectGliss = { |startFreq=100, endFreq=400, amp=0.8, dur=3.0|
    var addr = NetAddr.new("127.0.0.1", 57122);
    addr.sendMsg("/event", "gliss", startFreq, endFreq, amp, dur);
    if(s.serverRunning, {
        {
            var freqLine = XLine.kr(startFreq, endFreq, dur);
            var env = Env.linen(0.05, dur - 0.1, 0.05);
            var sig = SinOsc.ar(freqLine, 0, amp * EnvGen.kr(env, doneAction: 2));
            Out.ar(0, sig.dup);
        }.play;
    });
};

// Punto con sincronizaci√≥n perfecta
~perfectPoint = { |freq=440, amp=0.5, dur=1.0|
    var addr = NetAddr.new("127.0.0.1", 57122);
    addr.sendMsg("/event", "point", freq, amp, dur);
    if(s.serverRunning, {
        {
            var env = Env.linen(0.05, dur - 0.1, 0.05);
            var sig = SinOsc.ar(freq, 0, amp * EnvGen.kr(env, doneAction: 2));
            Out.ar(0, sig.dup);
        }.play;
    });
};

"‚úÖ Funciones de live coding cargadas: ~perfectGliss, ~perfectPoint".postln;
"Ejemplo de uso: ~perfectGliss.(200, 800, 0.9, 4.0);".postln;
)
