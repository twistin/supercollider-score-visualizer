#!/bin/bash
# Quick Start Script para SC Score Visualizer Universal
# Este script facilita el inicio r√°pido del sistema

echo "üéµ SC Score Visualizer Universal - Quick Start"
echo "=============================================="
echo ""

# Verificar que estamos en el directorio correcto
if [ ! -f "Cargo.toml" ]; then
    echo "‚ùå Error: Ejecuta este script desde el directorio del proyecto"
    echo "   cd /Users/sdcarr/Documents/github/sc-score/sc_score_visualizer"
    exit 1
fi

echo "üìÅ Directorio: $(pwd)"
echo ""

# Mostrar opciones
echo "Selecciona una opci√≥n:"
echo "1) üöÄ Iniciar visualizador"
echo "2) üß™ Ejecutar test OSC"
echo "3) üîß Verificar compilaci√≥n"
echo "4) üìÑ Mostrar configuraci√≥n"
echo "5) üìö Mostrar instrucciones SuperCollider"
echo ""

read -p "Opci√≥n (1-5): " choice

case $choice in
    1)
        echo "üöÄ Iniciando SC Score Visualizer..."
        echo "   Usando puerto definido en config.toml (deber√≠a ser 57124)"
        echo "   Presiona Ctrl+C para detener"
        echo ""
        cargo run --release
        ;;
    2)
        echo "üß™ Ejecutando test de conexi√≥n OSC..."
        python3 test_osc.py
        echo ""
        echo "‚úÖ Test completado. Si el visualizador est√° corriendo,"
        echo "   deber√≠as ver eventos en la ventana gr√°fica."
        ;;
    3)
        echo "üîß Verificando compilaci√≥n..."
        cargo check
        if [ $? -eq 0 ]; then
            echo ""
            echo "‚úÖ Compilaci√≥n exitosa"
        else
            echo ""
            echo "‚ùå Errores de compilaci√≥n encontrados"
        fi
        ;;
    4)
        echo "üìÑ Configuraci√≥n actual:"
        echo ""
        grep -A 2 -B 2 "port = " config.toml
        echo ""
        grep -A 2 -B 2 "mode = " config.toml
        ;;
    5)
        echo "üìö Instrucciones para SuperCollider:"
        echo ""
        echo "1. Inicia SuperCollider"
        echo "2. Ejecuta: s.boot;"
        echo "3. Ejecuta: (\"supercollider_examples.scd\").loadRelative;"
        echo "4. Espera el mensaje: '‚úì TODAS LAS FUNCIONES CARGADAS EXITOSAMENTE'"
        echo "5. Prueba con: scvTestBasicEvents.();"
        echo ""
        echo "Funciones disponibles:"
        echo "- scvTestBasicEvents.()          // Prueba b√°sica"
        echo "- scvXenakisComposition.()       // Composici√≥n completa"
        echo "- scvMetastasisPoints.()         // Puntos dispersos"
        echo "- scvPithopraktaGliss.()         // Glissandi"
        echo "- scvStochasticClouds.()         // Clusters estoc√°sticos"
        echo "- scvNoiseTextures.()            // Texturas de ruido"
        echo "- scvSpectralMasses.()           // Masas sonoras"
        echo "- scvRhythmicPatterns.()         // Patrones r√≠tmicos"
        echo ""
        echo "Funciones directas:"
        echo "- scvSendPoint.(freq, amp, dur)      // Evento puntual"
        echo "- scvSendGliss.(f1, f2, amp, dur)    // Glissando"
        echo "- scvSendCluster.(freq, amp, dur)    // Cluster"
        echo "- scvSendNoise.(fc, bw, amp, dur)    // Ruido"
        echo "- scvSendSoundMass.(freq, amp, dur)  // Masa sonora"
        ;;
    *)
        echo "‚ùå Opci√≥n inv√°lida"
        exit 1
        ;;
esac

echo ""
echo "üìñ Para m√°s informaci√≥n, consulta:"
echo "   - README.md"
echo "   - ESTADO_VERIFICADO_FINAL.md"
echo "   - docs/SISTEMA_UNIVERSAL_FINAL.md"
