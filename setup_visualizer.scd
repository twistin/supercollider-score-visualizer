



// setup_visualizer.scd - Configuraci√≥n b√°sica del visualizador SC Score Visualizer
// Cargar este archivo en SuperCollider para comenzar con live coding




//============================================================
// CONFIGURACI√ìN INICIAL
// ====================================================================

// Configurar servidor de audio
s.boot;

// Salir de ProxySpace si estamos en uno para evitar conflictos
if(currentEnvironment.isKindOf(ProxySpace)) {
    "Saliendo de ProxySpace para configuraci√≥n...".postln;
    currentEnvironment = topEnvironment;
};

// Definir un sintetizador simple para generar audio
SynthDef(\default, { |out = 0, freq = 440, amp = 0.5, dur = 1.0|
    var env = Env.perc(0.01, dur, amp, -4).kr(doneAction: 2);
    var sig = SinOsc.ar(freq, 0, 0.5);
    var pan = Pan2.ar(sig, 0);
    Out.ar(out, pan * env);
}).add;

// Configurar NetAddr para comunicaci√≥n OSC con el visualizador
// Usar variable global directamente
~visualizer = NetAddr("127.0.0.1", 6000); // Aseg√∫rate de que este puerto coincida con el que Nannou est√° escuchando

"üéµ Configurando SC Score Visualizer...".postln;

// ====================================================================
// FUNCIONES B√ÅSICAS (CON AUDIO)
// ====================================================================

// Funci√≥n para enviar notas al visualizador y reproducir sonido
(
~sendNote = { |freq, amp, dur|
    Synth(\default, [freq: freq, amp: amp, dur: dur]);
    ~visualizer.sendMsg("/note_on", freq, amp, dur); // <--- CAMBIADO A /note_on
};
);

// Funci√≥n para enviar drones y reproducir sonido
(
~sendDrone = { |freq, amp, dur|
    Synth(\default, [freq: freq, amp: amp, dur: dur]);
    ~visualizer.sendMsg("/drone_on", freq, amp, dur); // <--- CAMBIADO A /drone_on
};
);

// Funci√≥n para enviar clusters y reproducir sonido
(
~sendCluster = { |freq, amp, dur, density|
    // Tocar una nota representativa del cl√∫ster
    Synth(\default, [freq: freq, amp: amp, dur: dur]);
    ~visualizer.sendMsg("/cluster", freq, amp, dur, density); // Se mantiene /cluster por ahora
};
);

// Funci√≥n para limpiar eventos
(
~clearAll = {
    ~visualizer.sendMsg("/clear"); // Se mantiene /clear por ahora
};
);

// ====================================================================
// FUNCIONES DE UTILIDAD
// ====================================================================

// Convertir nota MIDI a frecuencia
~midiToFreq = { |midiNote| midiNote.midicps };

// Escala mayor
~majorScale = [0, 2, 4, 5, 7, 9, 11];

// Escala menor
~minorScale = [0, 2, 3, 5, 7, 8, 10];

// Generar escala desde nota base
~generateScale = { |baseNote, scale|
    scale.collect({ |interval| ~midiToFreq.value(baseNote + interval) });
};

// ====================================================================
// FUNCIONES DE PRUEBA
// ====================================================================

// Prueba de conectividad
~testConnection = {
    "üîç Probando conexi√≥n...".postln;
    ~sendNote.value(440, 0.5, 1.0);
    "‚úÖ Mensaje enviado: nota A4 (440 Hz)".postln;
};

// Prueba de escala
~testScale = {
    var escala;
    "üé∂ Probando escala...".postln;
    escala = ~generateScale.value(60, ~majorScale); // Do mayor
    Routine({
        escala.do({ |freq|
            ~sendNote.value(freq, 0.6, 0.5);
            0.5.wait;
        });
        "‚úÖ Escala completada".postln;
    }).play;
};

// Prueba de drone
~testDrone = {
    "üéµ Probando drone...".postln;
    ~sendDrone.value(110, 0.3, 5.0);  // La2, suave, 5 segundos
    "‚úÖ Drone enviado".postln;
};

// Prueba de cluster
~testCluster = {
    "üí• Probando cluster...".postln;
    ~sendCluster.value(330, 0.4, 3.0, 8);
    "‚úÖ Cluster enviado".postln;
};

// ====================================================================
// GENERADORES PARA LIVE CODING
// ====================================================================

// Variables globales para modificar en tiempo real
~tempo = 0.5;
~baseFreq = 440;
~amplitude = 0.5;
~currentScale = ~majorScale;

// Generador aleatorio simple
~startRandom = {
    ~randomGenerator = Routine({
        loop {
            var freq = rrand(200, 2000);
            var amp = rrand(0.2, 0.8);
            var dur = rrand(0.5, 3.0);

            ~sendNote.value(freq, amp, dur);
            rrand(0.1, 1.0).wait;
        }
    }).play;
    "üé≤ Generador aleatorio iniciado".postln;
};

// Detener generador aleatorio
~stopRandom = {
    if (~randomGenerator.notNil) {
        ~randomGenerator.stop;
        "‚èπÔ∏è Generador aleatorio detenido".postln;
    };
};

// Pattern mel√≥dico simple
~startMelody = {
    ~melodyPattern = Routine({
        var notas = ~generateScale.value(60, ~currentScale);
        loop {
            ~sendNote.value(notas.choose, ~amplitude, ~tempo);
            ~tempo.wait;
        }
    }).play;
    "üé∂ Melod√≠a iniciada".postln;
};

// Detener melod√≠a
~stopMelody = {
    if (~melodyPattern.notNil) {
        ~melodyPattern.stop;
        "‚èπÔ∏è Melod√≠a detenida".postln;
    };
};

// Bass line
~startBass = {
    ~bassPattern = Routine({
        var bajo = ~generateScale.value(36, ~currentScale);
        loop {
            ~sendNote.value(bajo.choose, ~amplitude * 0.8, ~tempo * 2);
            (~tempo * 2).wait;
        }
    }).play;
    "üîä L√≠nea de bajo iniciada".postln;
};

// Detener bajo
~stopBass = {
    if (~bassPattern.notNil) {
        ~bassPattern.stop;
        "‚èπÔ∏è L√≠nea de bajo detenida".postln;
    };
};

// ====================================================================
// EFECTOS VISUALES AVANZADOS
// ====================================================================

// Visualizaci√≥n compleja con m√∫ltiples capas
~startComplex = {
    ~complexVisual = Routine({
        loop {
            // Nota principal
            ~sendNote.value(rrand(300, 800), 0.7, 2.0);

            // Drone de fondo ocasional
            if (0.3.coin) {
                ~sendDrone.value(rrand(80, 120), 0.2, 4.0);
            };

            // Cluster espor√°dico
            if (0.2.coin) {
                ~sendCluster.value(rrand(500, 1500), 0.5, 1.5, rrand(5, 12));
            };

            rrand(0.5, 2.0).wait;
        }
    }).play;
    "üé® Visualizaci√≥n compleja iniciada".postln;
};

// Detener visualizaci√≥n compleja
~stopComplex = {
    if (~complexVisual.notNil) {
        ~complexVisual.stop;
        "‚èπÔ∏è Visualizaci√≥n compleja detenida".postln;
    };
};

// ====================================================================
// FUNCIONES DE CONTROL
// ====================================================================

// Detener todo
~stopAll = {
    ~stopRandom.value;
    ~stopMelody.value;
    ~stopBass.value;
    ~stopComplex.value;
    ~clearAll.value;
    "üõë Todo detenido y limpiado".postln;
};

// Cambiar escala
~setMajor = {
    ~currentScale = ~majorScale;
    "‚úÖ Escala cambiada a mayor".postln;
};

~setMinor = {
    ~currentScale = ~minorScale;
    "‚úÖ Escala cambiada a menor".postln;
};

// ====================================================================
// MEN√ö DE AYUDA
// ====================================================================

~showHelp = {
    "".postln;
    "üéµ SC Score Visualizer - Comandos Disponibles".postln;
    "===============================================".postln;
    "".postln;
    "üîß CONFIGURACI√ìN:".postln;
    "  ~testConnection.value    - Probar conexi√≥n".postln;
    "  ~testScale.value         - Probar escala".postln;
    "  ~testDrone.value         - Probar drone".postln;
    "  ~testCluster.value       - Probar cluster".postln;
    "".postln;
    "üé∂ GENERADORES:".postln;
    "  ~startRandom.value       - Iniciar generador aleatorio".postln;
    "  ~stopRandom.value        - Detener generador aleatorio".postln;
    "  ~startMelody.value       - Iniciar melod√≠a".postln;
    "  ~stopMelody.value        - Detener melod√≠a".postln;
    "  ~startBass.value         - Iniciar l√≠nea de bajo".postln;
    "  ~stopBass.value          - Detener l√≠nea de bajo".postln;
    "".postln;
    "üé® EFECTOS:".postln;
    "  ~startComplex.value      - Iniciar visualizaci√≥n compleja".postln;
    "  ~stopComplex.value       - Detener visualizaci√≥n compleja".postln;
    "".postln;
    "üõë CONTROL:".postln;
    "  ~stopAll.value           - Detener todo".postln;
    "  ~clearAll.value          - Limpiar visualizador".postln;
    "  ~setMajor.value          - Cambiar a escala mayor".postln;
    "  ~setMinor.value          - Cambiar a escala menor".postln;
    "".postln;
    "üéõÔ∏è VARIABLES PARA MODIFICAR EN VIVO:".postln;
    "  ~tempo = 0.5             - Cambiar tempo".postln;
    "  ~baseFreq = 440          - Cambiar frecuencia base".postln;
    "  ~amplitude = 0.5         - Cambiar amplitud".postln;
    "".postln;
    "üìù ENV√çO DIRECTO:".postln;
    "  ~sendNote.value(freq, amp, dur)".postln;
    "  ~sendDrone.value(freq, amp, dur)".postln;
    "  ~sendCluster.value(freq, amp, dur, density)".postln;
    "".postln;
    "üí° Tip: Ejecuta ~showHelp.value para ver esta ayuda nuevamente".postln;
    "".postln;
};

// ====================================================================
// INICIALIZACI√ìN
// ====================================================================

// Mostrar men√∫ al cargar
//~menuEjemplos.value; // <-- Esta l√≠nea no est√° definida en este archivo, ¬øquiz√°s en otro?

"üìù Ejemplos de live coding cargados. Ejecuta ~menuEjemplos.value para ver la lista.".postln;
~sendNote.value(440.0, 0.5, 1.0); // Env√≠o de nota al iniciar

~visualizer.sendMsg("/test", "SuperCollider est√° enviando!");
"Mensaje de prueba enviado desde SC".postln;

~testConnection.value // <-- Esta l√≠nea no est√° definida en este archivo, ¬øquiz√°s en otro?
