// =============================================================================
// üéº REALTIME AUDIO ANALYZER ALTERNATIVO - SuperCollider
// =============================================================================
// Versi√≥n sin Onsets para compatibilidad m√°xima
// An√°lisis de audio en tiempo real para visualizaci√≥n sincronizada
// =============================================================================

(
"üéµ Inicializando Motor de An√°lisis ALTERNATIVO (sin Onsets)...".postln;

// =============================================================================
// üîß SYNTHDEF ALTERNATIVO SIN ONSETS
// =============================================================================

SynthDef(\RealtimeAnalyzerAlt, {
    |inputBus = 0, oscPort = 57124, analyzeRate = 50|
    
    // Todas las declaraciones var al inicio
    var in, amp, pitch, hasFreq, onset, centroid, flux, rolloff, flatness;
    var mfcc, spectralSlope, noisiness, harmonicity, fft;
    var prevAmp, ampDiff;
    
    // Entrada de audio (configurable)
    in = SoundIn.ar(inputBus);
    
    // === AN√ÅLISIS TEMPORAL ===
    amp = Amplitude.kr(in, 0.01, 0.1);  // Amplitud con ataque/release r√°pido
    
    // === AN√ÅLISIS DE PITCH ===
    # pitch, hasFreq = Pitch.kr(
        in, 
        initFreq: 440, 
        minFreq: 60, 
        maxFreq: 4000,
        ampThreshold: 0.02,
        peakThreshold: 0.5,
        downSample: 1
    );
    
    // === DETECCI√ìN DE ONSETS ALTERNATIVA ===
    // Usar diferencia de amplitud como aproximaci√≥n a onsets
    prevAmp = Delay1.kr(amp);
    ampDiff = (amp - prevAmp).max(0);  // Solo diferencias positivas
    onset = (ampDiff > 0.1).lag(0.01); // Umbral y suavizado
    
    // === AN√ÅLISIS ESPECTRAL ===
    fft = FFT(LocalBuf(2048), in);
    
    // Centroide espectral (timbre "brillantez")
    centroid = SpecCentroid.kr(fft);
    
    // Flujo espectral aproximado (primera diferencia del centroide)
    flux = LPZ1.kr(centroid).abs;
    
    // Rolloff espectral (contenido de frecuencias altas)
    rolloff = SpecPcile.kr(fft, 0.85, 1);
    
    // Planitud espectral (medida de "ruidosidad")
    flatness = SpecFlatness.kr(fft);
    
    // === AN√ÅLISIS AVANZADO ===
    
    // Harmonicidad (qu√© tan tonal vs ruidoso)
    harmonicity = hasFreq * (1 - flatness);
    
    // Noisiness (inverso de harmonicidad)
    noisiness = flatness * (1 - hasFreq);
    
    // Pendiente espectral aproximada (usando centroide como proxy)
    spectralSlope = (centroid - 1000) / 1000;  // Normalizado alrededor de 1kHz
    
    // === ENV√çO OSC ULTRA-R√ÅPIDO ===
    SendReply.kr(
        Impulse.kr(analyzeRate), 
        "/realtime_audio", 
        [
            // Par√°metros b√°sicos
            pitch,           // [0] Frecuencia fundamental
            amp,             // [1] Amplitud RMS
            onset,           // [2] Detecci√≥n de onset (alternativa)
            hasFreq,         // [3] Confianza de pitch (0-1)
            
            // Par√°metros espectrales
            centroid,        // [4] Centroide espectral
            flux,            // [5] Flujo espectral
            rolloff,         // [6] Rolloff espectral
            flatness,        // [7] Planitud espectral
            
            // Par√°metros derivados
            harmonicity,     // [8] Harmonicidad (0-1)
            noisiness,       // [9] Ruidosidad (0-1)
            spectralSlope    // [10] Pendiente espectral
        ]
    );
    
    // Salida silenciosa (solo an√°lisis)
    Out.ar(0, Silent.ar(2));
    
}).add;

// =============================================================================
// üéõÔ∏è CONTROLADOR DE AN√ÅLISIS ALTERNATIVO
// =============================================================================

~startAnalysisAlt = {
    |inputBus = 0, rate = 50|
    
    // Detener an√°lisis previo si existe
    if (~analyzerAlt.notNil) { 
        ~analyzerAlt.free; 
        "‚èπÔ∏è An√°lisis alternativo previo detenido.".postln;
    };
    
    // Iniciar nuevo an√°lisis
    ~analyzerAlt = Synth(\RealtimeAnalyzerAlt, [
        \inputBus, inputBus,
        \analyzeRate, rate
    ]);
    
    "üéµ An√°lisis de audio ALTERNATIVO iniciado:".postln;
    ("   üìç Input Bus: " ++ inputBus).postln;
    ("   ‚ö° Rate: " ++ rate ++ " Hz").postln;
    ("   üì° OSC Port: 57124").postln;
    ("   üéØ OSC Address: /realtime_audio").postln;
    ("   üîÑ M√©todo: Detecci√≥n de onsets por diferencia de amplitud").postln;
};

~stopAnalysisAlt = {
    if (~analyzerAlt.notNil) { 
        ~analyzerAlt.free; 
        ~analyzerAlt = nil;
        "‚èπÔ∏è An√°lisis alternativo detenido.".postln;
    } {
        "‚ö†Ô∏è No hay an√°lisis alternativo activo.".postln;
    };
};

// =============================================================================
// üöÄ FUNCI√ìN DE PRUEBA ALTERNATIVA
// =============================================================================

~testAnalysisAlt = {
    "üß™ Iniciando prueba de an√°lisis ALTERNATIVO...".postln;
    ~startAnalysisAlt.(0, 50);  // Input bus 0, 50 Hz
    
    // Generar tono de prueba
    ~testToneAlt = {
        var freq = SinOsc.kr(0.2).range(220, 880);  // Glissando lento
        var amp = SinOsc.kr(0.5).range(0.1, 0.8);   // Amplitud variable
        SinOsc.ar(freq) * amp * 0.3;
    }.play;
    
    "üéº Tono de prueba generado (versi√≥n alternativa).".postln;
    "‚è±Ô∏è Ejecuta ~stopTestAlt.() para detener.".postln;
};

~stopTestAlt = {
    if (~testToneAlt.notNil) { ~testToneAlt.free; ~testToneAlt = nil; };
    ~stopAnalysisAlt.();
    "üõë Prueba alternativa detenida.".postln;
};

// =============================================================================
// üéØ INSTRUCCIONES ALTERNATIVAS
// =============================================================================

"".postln;
"üéµ MOTOR DE AN√ÅLISIS ALTERNATIVO LISTO".postln;
"(Sin dependencia de Onsets UGen)".postln;
"".postln;
"üìã COMANDOS DISPONIBLES:".postln;
"   ~startAnalysisAlt.()     - Iniciar an√°lisis alternativo".postln;
"   ~stopAnalysisAlt.()      - Detener an√°lisis alternativo".postln;
"   ~testAnalysisAlt.()      - Prueba con tono generado".postln;
"   ~stopTestAlt.()          - Detener prueba alternativa".postln;
"".postln;
"üéØ PR√ìXIMO PASO: Ejecutar ~testAnalysisAlt.() y verificar".postln;
"   que el visualizador Rust reciba los datos OSC.".postln;
"".postln;

)
