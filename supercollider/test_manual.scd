// =============================================================================
// ðŸŽ¼ TEST MANUAL - AnÃ¡lisis de Audio en Tiempo Real
// =============================================================================
// Ejecuta este archivo en SuperCollider IDE para probar el sistema
// =============================================================================

(
"ðŸŽµ === INICIANDO TEST MANUAL ===".postln;
"ðŸ“‹ Instrucciones:".postln;
"   1. Ejecuta este bloque completo".postln;
"   2. Inicia el visualizador Rust en la terminal".postln;
"   3. Reproduce mÃºsica o haz sonidos".postln;
"   4. Observa las visualizaciones sincronizadas".postln;
"";

// Cargar el SynthDef de anÃ¡lisis
load(Platform.userHomeDir ++ "/Documents/github/sc-score/sc_score_visualizer/realtime_analysis.scd");
)

// Iniciar servidor (evaluar por separado si no estÃ¡ iniciado)
(
Server.default.boot;
)

// Una vez que el servidor estÃ© listo, ejecutar el analizador
(
"ðŸš€ Iniciando anÃ¡lisis en tiempo real...".postln;
~analyzer = Synth(\RealtimeAnalyzer);

"ðŸ“¡ Enviando datos OSC a puerto 57124 cada 20ms".postln;
"ðŸŽ¨ Inicia el visualizador Rust ahora!".postln;
"";
"ðŸ’¡ Comandos Ãºtiles:".postln;
"   ~analyzer.free;  // Para detener el anÃ¡lisis".postln;
"   s.meter;         // Para ver niveles de audio".postln;
"   s.scope;         // Para ver forma de onda".postln;
)

// Opcional: Generar sonido de prueba si no hay entrada de audio
(
"ðŸŽµ Generando sonido de prueba (sintetizador simple)".postln;
~testSynth = {
    var sig = SinOsc.ar([220, 330] * LFNoise1.kr(0.5).range(0.8, 1.2)) * 
              EnvGen.kr(Env.perc(0.01, 1), Impulse.kr(2)) * 0.3;
    Out.ar(0, sig);
}.play;
)

// Para detener todo
(
"ðŸ›‘ Deteniendo anÃ¡lisis y sonidos de prueba...".postln;
~analyzer.free;
~testSynth.free;
)

// Test con glissando (inspiraciÃ³n Xenakis)
(
"ðŸŽ¼ Test con glissando estilo Xenakis...".postln;
~xenakisTest = {
    var freq = XLine.kr(200, 2000, 8);
    var amp = Line.kr(0.1, 0.8, 8) * Line.kr(1, 0, 8);
    var sig = SinOsc.ar(freq) * amp;
    Out.ar(0, sig ! 2);
}.play;
)

// Test con masa sonora (clusters)
(
"ðŸŽ¼ Test con masa sonora (clusters)...".postln;
~clusterTest = {
    var freqs = {exprand(200, 2000)} ! 20;
    var sig = Mix(SinOsc.ar(freqs) * LFNoise1.kr({exprand(0.1, 2)} ! 20).max(0)) * 0.1;
    Out.ar(0, sig ! 2);
}.play;
)

// Test rÃ­tmico (onsets claros)
(
"ðŸŽ¼ Test rÃ­tmico (onsets marcados)...".postln;
~rhythmTest = {
    var trig = Impulse.kr([2, 3, 5, 7].choose);
    var freq = TChoose.kr(trig, [220, 330, 440, 550]);
    var sig = SinOsc.ar(freq) * EnvGen.kr(Env.perc(0.01, 0.2), trig) * 0.3;
    Out.ar(0, sig ! 2);
}.play;
)

// Detener tests
(
[~xenakisTest, ~clusterTest, ~rhythmTest].do(_.free);
)
