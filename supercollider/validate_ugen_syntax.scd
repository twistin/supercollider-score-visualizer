(
// =============================================================================
// üß™ VALIDADOR DE SINTAXIS UGENS - SuperCollider
// =============================================================================

"üîß Validando sintaxis de UGens espec√≠ficos...".postln;

// Test 1: Onsets UGen
"".postln;
"üìä Test 1: Onsets UGen".postln;
"===================".postln;

try {
    // Sintaxis corregida para Onsets
    {
        var in, fft, onset;
        in = SinOsc.ar(440) * 0.1;
        fft = FFT(LocalBuf(1024), in);
        onset = Onsets.kr(
            fft,           // chain
            \rcomplex,     // odftype
            0.3,           // threshold
            1.0,           // relaxtime
            0.1,           // floor
            10             // mingap
        );
        onset.poll(1, "Onset");
        Silent.ar(2);
    }.play;
    
    "‚úÖ Onsets: Sintaxis CORRECTA".postln;
    
} { |error|
    ("‚ùå Onsets: Error - " ++ error.errorString).postln;
};

// Test 2: Pitch UGen
"".postln;
"üìä Test 2: Pitch UGen".postln;
"==================".postln;

try {
    {
        var in, pitch, hasFreq;
        in = SinOsc.ar(440) * 0.1;
        # pitch, hasFreq = Pitch.kr(
            in,
            initFreq: 440,
            minFreq: 60,
            maxFreq: 4000,
            ampThreshold: 0.02,
            peakThreshold: 0.5,
            downSample: 1
        );
        pitch.poll(1, "Pitch");
        Silent.ar(2);
    }.play;
    
    "‚úÖ Pitch: Sintaxis CORRECTA".postln;
    
} { |error|
    ("‚ùå Pitch: Error - " ++ error.errorString).postln;
};

// Test 3: An√°lisis espectral
"".postln;
"üìä Test 3: An√°lisis Espectral".postln;
"===========================".postln;

try {
    {
        var in, fft, centroid, flatness, rolloff;
        in = SinOsc.ar(440) * 0.1;
        fft = FFT(LocalBuf(2048), in);
        
        centroid = SpecCentroid.kr(fft);
        flatness = SpecFlatness.kr(fft);
        rolloff = SpecPcile.kr(fft, 0.85, 1);
        
        centroid.poll(1, "Centroid");
        Silent.ar(2);
    }.play;
    
    "‚úÖ An√°lisis Espectral: Sintaxis CORRECTA".postln;
    
} { |error|
    ("‚ùå An√°lisis Espectral: Error - " ++ error.errorString).postln;
};

// Test 4: Compilaci√≥n completa del SynthDef
"".postln;
"üìä Test 4: SynthDef Completo".postln;
"==========================".postln;

// Parar cualquier an√°lisis previo
if (~analyzer.notNil) { ~analyzer.free; ~analyzer = nil; };

try {
    // Cargar y compilar el archivo completo
    thisProcess.interpreter.executeFile("realtime_analysis.scd".resolveRelative);
    "‚úÖ SynthDef RealtimeAnalyzer: COMPILADO EXITOSAMENTE".postln;
    
} { |error|
    ("‚ùå SynthDef RealtimeAnalyzer: Error - " ++ error.errorString).postln;
    ("   L√≠nea aproximada: " ++ error.protectedBacktrace).postln;
};

"".postln;
"üéØ RESUMEN DE VALIDACI√ìN:".postln;
"========================".postln;
"Si todos los tests muestran ‚úÖ, el archivo est√° listo para uso.".postln;
"Si hay errores ‚ùå, revisa la sintaxis de los UGens indicados.".postln;
"".postln;
)
